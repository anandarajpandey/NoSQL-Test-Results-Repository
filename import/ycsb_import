#!/usr/bin/python

import os
import argparse
from datetime import datetime
import dateutil.parser
import pytz
import bson.objectid

def directory(string):
    try:
        for file in os.listdir(string):
            if file.endswith('.out'):
                return string
    except:
        raise argparse.ArgumentTypeError('%s is not a directory' % string)

    raise argparse.ArgumentTypeError('no .out files in %s' % string)

def timezone(zone, offset):
    if offset:
        return int(offset)
    else:
        return pytz.timezone(zone)

def datetime_parse(string):
    try:
        return dateutil.parser.parse(string, tzinfos=timezone)
    except:
        raise argparse.ArgumentTypeError('%s is not a datetime' % string)

def objectid_parse(string):
    try:
        return bson.objectid.ObjectId(string)
    except:
        raise argparse.ArgumentTypeError('%s is not an ObjectId' % string)

parser = argparse.ArgumentParser(description='Imports YCSB .out files into MongoDB')
parser.add_argument('path', help='path to directory with .out files', type=directory, nargs='?', default='.')
parser.add_argument('--time', help='datetime of the test run in YYYY-MM-DDTHH:MM:SSZZZ format',
    type=datetime_parse, nargs='?', default=datetime.now(), const=datetime.now())
parser.add_argument('-n', '--name', help='human-readable name of the test', nargs='?')
parser.add_argument('-t', '--tag', help='tag to add to the test result (use multiple times)', nargs='*', action='append')
parser.add_argument('--tags-file', help='read tags from the file, each tag in a line', type=argparse.FileType('r'), nargs='?')
env_group = parser.add_mutually_exclusive_group()
env_group.add_argument('-e', '--env-id', help='id of the environment', type=objectid_parse, nargs='?')
env_group.add_argument('--env-file', help='json file for the new environment', type=argparse.FileType('r'), nargs='?')

args = parser.parse_args()

print args
#print args.time.strftime('%Y-%m-%dT%H:%M:%S%Z')
